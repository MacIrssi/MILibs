<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="gio-GContentType">
<refmeta>
<refentrytitle role="top_of_page">GContentType</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GContentType</refname>
<refpurpose>Platform-specific content typing</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gio.h&gt;


<link linkend="gboolean">gboolean</link>            <link linkend="g-content-type-equals">g_content_type_equals</link>               (const <link linkend="char">char</link> *type1,
                                                         const <link linkend="char">char</link> *type2);
<link linkend="gboolean">gboolean</link>            <link linkend="g-content-type-is-a">g_content_type_is_a</link>                 (const <link linkend="char">char</link> *type,
                                                         const <link linkend="char">char</link> *supertype);
<link linkend="gboolean">gboolean</link>            <link linkend="g-content-type-is-unknown">g_content_type_is_unknown</link>           (const <link linkend="char">char</link> *type);
<link linkend="char">char</link>*               <link linkend="g-content-type-get-description">g_content_type_get_description</link>      (const <link linkend="char">char</link> *type);
<link linkend="char">char</link>*               <link linkend="g-content-type-get-mime-type">g_content_type_get_mime_type</link>        (const <link linkend="char">char</link> *type);
<link linkend="GIcon">GIcon</link>*              <link linkend="g-content-type-get-icon">g_content_type_get_icon</link>             (const <link linkend="char">char</link> *type);
<link linkend="gboolean">gboolean</link>            <link linkend="g-content-type-can-be-executable">g_content_type_can_be_executable</link>    (const <link linkend="char">char</link> *type);
<link linkend="char">char</link>*               <link linkend="g-content-type-guess">g_content_type_guess</link>                (const <link linkend="char">char</link> *filename,
                                                         const <link linkend="guchar">guchar</link> *data,
                                                         <link linkend="gsize">gsize</link> data_size,
                                                         <link linkend="gboolean">gboolean</link> *result_uncertain);
<link linkend="GList">GList</link>*              <link linkend="g-content-types-get-registered">g_content_types_get_registered</link>      (void);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A content type is a platform specific string that defines the type
of a file. On unix it is a mime type, on win32 it is an extension string
like ".doc", ".txt" or a percieved string like "audio". Such strings
can be looked up in the registry at HKEY_CLASSES_ROOT.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="g-content-type-equals" role="function"/>g_content_type_equals ()</title>
<indexterm><primary>g_content_type_equals</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_content_type_equals               (const <link linkend="char">char</link> *type1,
                                                         const <link linkend="char">char</link> *type2);</programlisting>
<para>
Compares two content types for equality.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type1</parameter>&nbsp;:</term>
<listitem><simpara> a content type string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type2</parameter>&nbsp;:</term>
<listitem><simpara> a content type string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the two strings are identical or equivalent,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-is-a" role="function"/>g_content_type_is_a ()</title>
<indexterm><primary>g_content_type_is_a</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_content_type_is_a                 (const <link linkend="char">char</link> *type,
                                                         const <link linkend="char">char</link> *supertype);</programlisting>
<para>
Determines if <parameter>type</parameter> is a subset of <parameter>supertype</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a content type string. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>supertype</parameter>&nbsp;:</term>
<listitem><simpara> a string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>type</parameter> is a kind of <parameter>supertype</parameter>,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-is-unknown" role="function"/>g_content_type_is_unknown ()</title>
<indexterm><primary>g_content_type_is_unknown</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_content_type_is_unknown           (const <link linkend="char">char</link> *type);</programlisting>
<para>
Checks if the content type is the generic "unknown" type.
On unix this is the "application/octet-stream" mimetype,
while on win32 it is "*".</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a content type string. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the type is the unknown type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-get-description" role="function"/>g_content_type_get_description ()</title>
<indexterm><primary>g_content_type_get_description</primary></indexterm><programlisting><link linkend="char">char</link>*               g_content_type_get_description      (const <link linkend="char">char</link> *type);</programlisting>
<para>
Gets the human readable description of the content type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a content type string. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a short description of the content type <parameter>type</parameter>. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-get-mime-type" role="function"/>g_content_type_get_mime_type ()</title>
<indexterm><primary>g_content_type_get_mime_type</primary></indexterm><programlisting><link linkend="char">char</link>*               g_content_type_get_mime_type        (const <link linkend="char">char</link> *type);</programlisting>
<para>
Gets the mime-type for the content type. If one is registered</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a content type string. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the registered mime-type for the given <parameter>type</parameter>, or NULL if unknown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-get-icon" role="function"/>g_content_type_get_icon ()</title>
<indexterm><primary>g_content_type_get_icon</primary></indexterm><programlisting><link linkend="GIcon">GIcon</link>*              g_content_type_get_icon             (const <link linkend="char">char</link> *type);</programlisting>
<para>
Gets the icon for a content type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a content type string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="GIcon"><type>GIcon</type></link> corresponding to the content type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-can-be-executable" role="function"/>g_content_type_can_be_executable ()</title>
<indexterm><primary>g_content_type_can_be_executable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_content_type_can_be_executable    (const <link linkend="char">char</link> *type);</programlisting>
<para>
Checks if a content type can be executable. Note that for instance
things like text files can be executables (i.e. scripts and batch files).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> a content type string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the file type corresponds to a type that
can be executable, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-type-guess" role="function"/>g_content_type_guess ()</title>
<indexterm><primary>g_content_type_guess</primary></indexterm><programlisting><link linkend="char">char</link>*               g_content_type_guess                (const <link linkend="char">char</link> *filename,
                                                         const <link linkend="guchar">guchar</link> *data,
                                                         <link linkend="gsize">gsize</link> data_size,
                                                         <link linkend="gboolean">gboolean</link> *result_uncertain);</programlisting>
<para>
Guesses the content type based on example data. If the function is 
uncertain, <parameter>result_uncertain</parameter> will be set to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> a string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> a stream of data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&nbsp;:</term>
<listitem><simpara> the size of <parameter>data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_uncertain</parameter>&nbsp;:</term>
<listitem><simpara> a flag indicating the certainty of the 
result.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string indicating a guessed content type for the 
given data. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-content-types-get-registered" role="function"/>g_content_types_get_registered ()</title>
<indexterm><primary>g_content_types_get_registered</primary></indexterm><programlisting><link linkend="GList">GList</link>*              g_content_types_get_registered      (void);</programlisting>
<para>
Gets a list of strings containing all the registered content types
known to the system. The list and its data should be freed using 
<parameter>g_list_foreach</parameter>(list, g_free, NULL) and <parameter>g_list_free</parameter>(list)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="GList"><type>GList</type></link> of the registered content types.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
